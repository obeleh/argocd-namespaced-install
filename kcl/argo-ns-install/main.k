import file
import application
import fileheader

_output_folder = option("output_folder", default="output")
_repo_path = option("repo_path", default="argocd")
_repo_url = option("repo_url", required=True)
_argo_namespace = option("argo_namespace", required=True)
_argo_version = option("argo_version", required=True)
_application_namespaces = option("application_namespaces", type="list", required=True)
_bootstrap_namespaces = option("bootstrap_namespaces", type="bool", default=False)
_bootstrap_crds = option("bootstrap_crds", type="bool", default=False)

_generated_header = """# This file was generated by KCL module argo-ns-install
# The gods of GitOps are watching you!
# DO NOT EDIT!
# We warned you!

"""

if not file.exists("${_output_folder}/gitopscontroller/base"):
    file.mkdir("${_output_folder}/gitopscontroller/base")

if not file.exists("${_output_folder}/bootstrap"):
    file.mkdir("${_output_folder}/bootstrap")

_bootstrap_kustomization = {
    apiVersion = "kustomize.config.k8s.io/v1beta1"
    kind = "Kustomization"
    resources = [
        "../gitopscontroller"
    ]
}

if _bootstrap_namespaces:
    _bootstrap_kustomization["resources"] = ["namespaces.yaml"] + _bootstrap_kustomization["resources"]

if _bootstrap_crds:
    _bootstrap_kustomization["resources"] = [
        "https://raw.githubusercontent.com/argoproj/argo-cd/${_argo_version}/manifests/crds/application-crd.yaml"
        "https://raw.githubusercontent.com/argoproj/argo-cd/${_argo_version}/manifests/crds/appproject-crd.yaml"
        "https://raw.githubusercontent.com/argoproj/argo-cd/${_argo_version}/manifests/crds/applicationset-crd.yaml"
    ] + _bootstrap_kustomization["resources"]

_in_cluster = {
    apiVersion = "v1"
    kind = "Secret"
    metadata = {
        name = "in-cluster"
        namespace = _argo_namespace
        labels = {
            "argocd.argoproj.io/secret-type" = "cluster"
        }
    }
    stringData = {
        config = r"""{"tlsClientConfig":{"insecure":false}}"""
        name = "in-cluster"
        namespaces = ",".join([_argo_namespace] + _application_namespaces)
        server = "https://kubernetes.default.svc"
    }
}

_argocd_custom_ns = {
    apiVersion = "v1"
    kind = "Namespace"
    metadata = {
        name = _argo_namespace
    }
}

_base_kustomization = {
    apiVersion = "kustomize.config.k8s.io/v1beta1"
    kind = "Kustomization"
    namespace = _argo_namespace
    resources = [
        "https://raw.githubusercontent.com/argoproj/argo-cd/${_argo_version}/manifests/namespace-install.yaml"
    ] + ["app-project.yaml", "in-cluster.yaml", "application.yaml"]
}

_kustomization = {
    apiVersion = "kustomize.config.k8s.io/v1beta1"
    kind = "Kustomization"
    resources = ["base"] + ["${ns}-prerequisites.yaml" for ns in _application_namespaces]
}

_gitops_controller_app = {
    apiVersion = "argoproj.io/v1alpha1"
    kind = "Application"
    metadata = {
        name = "gitops-controller"
        namespace = _argo_namespace
        finalizers = [
            "resources-finalizer.argocd.argoproj.io"
        ]
    }
    spec = {
        syncPolicy = {
            automated = {
                prune = False
                selfHeal = True
            }
            retry = {
                limit = 15
                backoff = {
                    duration = "15s"
                    factor = 2
                    maxDuration = "5m"
                }
            }
        }
        destination = {
            namespace = _argo_namespace
            server = "https://kubernetes.default.svc"
        }
        project = "gitops-controller"
        source = {
            path = "${_repo_path}/gitopscontroller"
            repoUrl = _repo_url
            targetRevision = "main"
        }
    }
}

_gitops_controller_app_project = {
    apiVersion = "argoproj.io/v1alpha1"
    kind = "AppProject"
    metadata = {
        name = "gitops-controller"
        namespace = _argo_namespace
    }
    spec = {
        destinations = [
            {
                namespace = _argo_namespace
                server = "https://kubernetes.default.svc"
            }
        ] + [
            {
                namespace = ns
                server = "https://kubernetes.default.svc"
            } for ns in _application_namespaces
        ]
        sourceRepos = [
            "*"
        ]
        namespaceResourceWhitelist = [
            {
                group = "*"
                kind = "*"
            }
        ]
    }
}

_namespaces = [
    {
        apiVersion = "v1"
        kind = "Namespace"
        metadata = {
            name = ns
        }
    } for ns in _application_namespaces + [_argo_namespace]
]

_ = [application._application_ns_resources(_argo_namespace, ns, _output_folder, _repo_url, _repo_path) for ns in _application_namespaces]

fileheader._dump_with_header(_gitops_controller_app, "${_output_folder}/gitopscontroller/base/application.yaml", _generated_header)
fileheader._dump_with_header(_base_kustomization, "${_output_folder}/gitopscontroller/base/kustomization.yaml", _generated_header)
fileheader._dump_with_header(_gitops_controller_app_project, "${_output_folder}/gitopscontroller/base/app-project.yaml", _generated_header)
fileheader._dump_with_header(_in_cluster, "${_output_folder}/gitopscontroller/base/in-cluster.yaml", _generated_header)
fileheader._dump_with_header(_kustomization, "${_output_folder}/gitopscontroller/kustomization.yaml", _generated_header)
fileheader._dump_with_header(_bootstrap_kustomization, "${_output_folder}/bootstrap/kustomization.yaml", _generated_header)
if _bootstrap_namespaces:
    fileheader._dump_all_with_header(_namespaces, "${_output_folder}/bootstrap/namespaces.yaml", _generated_header)