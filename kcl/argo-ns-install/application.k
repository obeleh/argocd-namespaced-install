import file
import fileheader

_generated_header = """# This file was generated by KCL module argo-ns-install
# The gods of GitOps are watching you!
# DO NOT EDIT!
# We warned you!

"""

_modifiable_file_header = """# This file was generated by KCL module argo-ns-install
# Feel free to edit this file, it won't be overwritten

"""

_readme_text = """For every folder in this directory, an ArgoCD Application will be created.
Every folder should contain a `kustomization.yaml` and of course, the resources you want to deploy.

Example:
```yaml
apiVersion: kustomize.config.k8s.io/v1
kind: Kustomization
namespace: argocd-custom-ns
resources:
# - deployment.yaml
```
"""

_application_ns_resources = lambda _argo_namespace: str, _namespace: str, _output_folder: str, _repo_url: str, _repo_path: str {
    _gitopscontroller_resources = [
        {
            apiVersion = "rbac.authorization.k8s.io/v1"
            kind = "Role"
            metadata = {
                namespace = _namespace
                name = "argocd-role"
            }
            rules = [
                {
                    apiGroups = [
                        "*"
                    ]
                    resources = [
                        "*"
                    ]
                    verbs = [
                        "*"
                    ]
                }
            ]
        }
        {
            apiVersion = "rbac.authorization.k8s.io/v1"
            kind = "RoleBinding"
            metadata = {
                namespace = _namespace
                name = "argocd-role-binding"
            }
            subjects = [
                {
                    kind = "ServiceAccount"
                    name = "argocd-application-controller"
                    namespace = _argo_namespace
                }
                {
                    kind = "ServiceAccount"
                    name = "argocd-server"
                    namespace = _argo_namespace
                }
            ]
            roleRef = {
                kind = "Role"
                name = "argocd-role"
                apiGroup = "rbac.authorization.k8s.io"
            }
        }
        # ---
        {
            apiVersion = "argoproj.io/v1alpha1"
            kind = "AppProject"
            metadata = {
                name = _namespace
                namespace = _argo_namespace
            }
            spec = {
                destinations = [
                    {
                        namespace = _namespace
                        server = "https://kubernetes.default.svc"
                    }
                ]
                sourceRepos = [
                    "*"
                ]
                namespaceResourceWhitelist = [
                    {
                        group = "*"
                        kind = "*"
                    }
                ]
            }
        }
        # ---
        {
            apiVersion = "argoproj.io/v1alpha1"
            kind = "Application"
            metadata = {
                name = "${_namespace}-argo-applications"
                namespace = _argo_namespace
                finalizers = [
                    "resources-finalizer.argocd.argoproj.io"
                ]
            }
            spec = {
                syncPolicy = {
                    automated = {
                        prune = False
                        selfHeal = True
                    }
                    retry = {
                        limit = 15
                        backoff = {
                            duration = "15s"
                            factor = 2
                            maxDuration = "5m"
                        }
                    }
                }
                destination = {
                    namespace = _namespace
                    server = "https://kubernetes.default.svc"
                }
                project = "gitops-controller"
                source = {
                    path = "argocd/projects/${_namespace}/argo-applications"
                    targetRevision = "main"
                    repoURL = _repo_url
                }
            }
        }
    ]
    fileheader._dump_all_with_header(_gitopscontroller_resources, "${_output_folder}/gitopscontroller/${_namespace}-prerequisites.yaml", _generated_header)

    if not file.exists("${_output_folder}/projects/${_namespace}/argo-applications"):
        file.mkdir("${_output_folder}/projects/${_namespace}/argo-applications")

    if not file.exists("${_output_folder}/projects/${_namespace}/workloads"):
        file.mkdir("${_output_folder}/projects/${_namespace}/workloads")

    _kustomization = {
        apiVersion = "kustomize.config.k8s.io/v1"
        kind = "Kustomization"
        namespace: _argo_namespace
        resources = [
            "workloads.yaml"
        ]
    }

    _workloads = {
        apiVersion = "argoproj.io/v1alpha1"
        kind = "ApplicationSet"
        metadata = {
            namespace = _argo_namespace
            name = "${_namespace}-workloads"
        }
        spec = {
            generators = [
                {
                    git = {
                        repoURL = _repo_url
                        revision = "main"
                        directories = [
                            {
                                path = "${_repo_path}/projects/${_namespace}/workloads/*"
                            }
                        ]
                    }
                }
            ]
            template = {
                metadata = {
                    name = "{{path.basename}}"
                }
                spec = {
                    project = _namespace
                    syncPolicy = {
                        automated = {
                            prune = False
                            selfHeal = True
                        }
                        retry = {
                            limit = 15
                            backoff = {
                                duration = "15s"
                                factor = 2
                                maxDuration = "5m"
                            }
                        }
                    }
                    source = {
                        repoURL = _repo_url
                        targetRevision = "main"
                        path = "{{path}}"
                    }
                    destination = {
                        server = "https://kubernetes.default.svc"
                        namespace = _namespace
                    }
                }
            }
        }
    }

    if not file.exists("${_output_folder}/projects/${_namespace}/argo-applications/kustomization.yaml"):
        fileheader._dump_with_header(_kustomization, "${_output_folder}/projects/${_namespace}/argo-applications/kustomization.yaml", _modifiable_file_header)
    fileheader._dump_with_header(_workloads, "${_output_folder}/projects/${_namespace}/argo-applications/workloads.yaml", _generated_header)

    file.write("${_output_folder}/projects/${_namespace}/workloads/README.md", "# ${_namespace} workloads\n\nWorkloads will be deployed in namespace: ${_namespace}\n" + _readme_text)
}